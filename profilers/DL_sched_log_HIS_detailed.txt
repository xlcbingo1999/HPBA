Timer unit: 1e-06 s

Total time: 642.89 s
File: DL_sched.py
Function: get_scheduling_datablock_result_from_policy at line 655

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   655                                               @profile
   656                                               def get_scheduling_datablock_result_from_policy(self, job_id_2_dataset_name, job_id_2_target_epsilon_require, 
   657                                                                                   job_id_2_target_datablock_selected_num, job_id_2_job_priority_weight, 
   658                                                                                   job_id_2_test_dataset_name, job_id_2_sub_test_key_id, 
   659                                                                                   job_id_2_significance, job_id_2_arrival_index):
   660      1000        395.9      0.4      0.0          job_2_selected_datablock_identifiers = []
   661                                                   # 在这里接入算法?
   662      1000     779652.8    779.7      0.1          state = self.get_runtime_state(job_id_2_dataset_name, job_id_2_target_epsilon_require, 
   663      1000        224.0      0.2      0.0                                      job_id_2_target_datablock_selected_num, job_id_2_job_priority_weight, 
   664      1000        257.3      0.3      0.0                                      job_id_2_test_dataset_name, job_id_2_sub_test_key_id, 
   665      1000        212.0      0.2      0.0                                      job_id_2_significance, job_id_2_arrival_index)
   666      1000  642108644.7 642108.6     99.9          job_2_selected_datablock_identifiers, selected_real_sched_epsilon_map, calcu_compare_epsilon = self.assignment_policy.get_allocation(state)
   667                                                   # not_selected_datablock_identifiers = [tu[0] for tu in sub_train_sort[target_datablock_select_num:]]
   668      1000       1091.4      1.1      0.0          return job_2_selected_datablock_identifiers, selected_real_sched_epsilon_map, calcu_compare_epsilon

Total time: 643.334 s
File: DL_sched.py
Function: sched_dataset_for_done_significance_cal_jobs at line 985

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   985                                               @profile
   986                                               def sched_dataset_for_done_significance_cal_jobs(self):
   987      1000      14188.7     14.2      0.0          all_done_sig_cal_jobs_copy = copy.deepcopy(self.status_2_jobid[JOB_STATUS_KEY.DONE_SIGNIFICANCE_CAL])
   988      1000        913.5      0.9      0.0          if len(all_done_sig_cal_jobs_copy) <= 0:
   989                                                       return
   990      1000        791.6      0.8      0.0          if self.assignment_policy.only_one:
   991      1000        558.5      0.6      0.0              all_done_sig_cal_jobs_copy = [all_done_sig_cal_jobs_copy[0]]
   992                                                   
   993      1000       2351.3      2.4      0.0          job_id_2_dataset_name = {job_id: self.jobid_2_train_dataset_name[job_id] for job_id in all_done_sig_cal_jobs_copy}
   994      1000       1498.9      1.5      0.0          job_id_2_target_epsilon_require = {job_id: self.jobid_2_target_epsilon[job_id] for job_id in all_done_sig_cal_jobs_copy}
   995      1000       1158.7      1.2      0.0          job_id_2_target_datablock_selected_num = {job_id: self.jobid_2_datablock_selected_num[job_id] for job_id in all_done_sig_cal_jobs_copy}
   996      1000       1283.1      1.3      0.0          job_id_2_job_priority_weight = {job_id: self.jobid_2_priority_weight[job_id] for job_id in all_done_sig_cal_jobs_copy}
   997      1000       1160.4      1.2      0.0          job_id_2_test_dataset_name = {job_id: self.jobid_2_test_dataset_name[job_id] for job_id in all_done_sig_cal_jobs_copy}
   998      1000       1234.8      1.2      0.0          job_id_2_sub_test_key_id = {job_id: self.jobid_2_sub_test_key_id[job_id] for job_id in all_done_sig_cal_jobs_copy}
   999      1000       1386.6      1.4      0.0          job_id_2_significance = {job_id: self.jobid_2_significance[job_id] for job_id in all_done_sig_cal_jobs_copy}
  1000      1000       1256.2      1.3      0.0          job_id_2_arrival_index = {job_id: self.jobid_2_arrival_index[job_id] for job_id in all_done_sig_cal_jobs_copy}
  1001                                                   
  1002                                                   # 为没有决定分配方案的任务决定分配方案
  1003      1000        340.7      0.3      0.0          job_2_selected_datablock_identifiers, selected_real_sched_epsilon_map, calcu_compare_epsilon = \
  1004      1000  642914458.4 642914.5     99.9              self.get_scheduling_datablock_result_from_policy(job_id_2_dataset_name, 
  1005      1000        294.5      0.3      0.0                  job_id_2_target_epsilon_require, job_id_2_target_datablock_selected_num, job_id_2_job_priority_weight, 
  1006      1000        259.7      0.3      0.0                  job_id_2_test_dataset_name, job_id_2_sub_test_key_id, job_id_2_significance, job_id_2_arrival_index)
  1007      1000       1282.3      1.3      0.0          success_sched_job_ids = set()
  1008      1000        340.5      0.3      0.0          success_datasetidentifier_2_consume_epsilon = {}
  1009       573        509.7      0.9      0.0          if len(job_2_selected_datablock_identifiers) > 0:
  1010      4626       1423.8      0.3      0.0              for temp_job_id, identifier in job_2_selected_datablock_identifiers:
  1011      4199       1240.2      0.3      0.0                  if temp_job_id not in self.jobid_2_sub_train_key_ids:
  1012       427        277.8      0.7      0.0                      self.jobid_2_sub_train_key_ids[temp_job_id] = []
  1013      4626       1866.1      0.4      0.0                  consume_epsilon = selected_real_sched_epsilon_map[(temp_job_id, identifier)] 
  1014      4626       1690.7      0.4      0.0                  self.jobid_2_sched_epsilon[temp_job_id] = consume_epsilon
  1015      4626       1216.2      0.3      0.0                  dataset_name = job_id_2_dataset_name[temp_job_id]
  1016      4626       2453.0      0.5      0.0                  if self.sub_train_datasetidentifier_2_epsilon_remain[dataset_name][identifier] >= consume_epsilon:
  1017      4626       2181.6      0.5      0.0                      self.sub_train_datasetidentifier_2_epsilon_remain[dataset_name][identifier] -= consume_epsilon # calcu_compare_epsilon
  1018      4626       1976.4      0.4      0.0                      self.jobid_2_sub_train_key_ids[temp_job_id].append(identifier)
  1019      4626       1713.0      0.4      0.0                      success_sched_job_ids.add(temp_job_id)
  1020      4199       1185.5      0.3      0.0                      if dataset_name not in success_datasetidentifier_2_consume_epsilon:
  1021       427        198.0      0.5      0.0                          success_datasetidentifier_2_consume_epsilon[dataset_name] = {}
  1022      4626       1543.1      0.3      0.0                      if identifier not in success_datasetidentifier_2_consume_epsilon[dataset_name]:
  1023      4626       1835.3      0.4      0.0                          success_datasetidentifier_2_consume_epsilon[dataset_name][identifier] = 0.0
  1024      4626       1826.0      0.4      0.0                      success_datasetidentifier_2_consume_epsilon[dataset_name][identifier] += consume_epsilon
  1025      4626       1690.2      0.4      0.0                  if self.sub_train_datasetidentifier_2_epsilon_remain[dataset_name][identifier] <= 0.0:
  1026                                                               self.sub_train_datasetidentifier_2_dataset_status[dataset_name][identifier] = DATASET_STATUS_KEY.EXHAUST
  1027                                                               if self.simulation:
  1028                                                                   self.sub_train_datasetidentifier_2_exhausted_time[dataset_name][identifier] = self.simulation_global_time
  1029                                                               else:
  1030                                                                   self.sub_train_datasetidentifier_2_exhausted_time[dataset_name][identifier] = time.time()
  1031                                                   
  1032      1000     104067.7    104.1      0.0          self.sched_logger.info("final true success Jobs selected datablock identifiers: {}".format(success_sched_job_ids))
  1033      1000      10390.5     10.4      0.0          self.push_success_scheduling_result_to_policy(success_datasetidentifier_2_consume_epsilon)
  1034                                           
  1035                                                   # 不管是否进行数据块的分配, 都应该增加
  1036      1000        435.1      0.4      0.0          for temp_job_id in all_done_sig_cal_jobs_copy:
  1037                                                       # self.jobid_2_current_epochs[temp_job_id] += self.jobid_2_update_sched_epoch_num[temp_job_id]
  1038      1000      91903.1     91.9      0.0              self.job_add_to_history(temp_job_id)
  1039                                           
  1040      1000      16396.1     16.4      0.0          need_failed_job = copy.deepcopy(all_done_sig_cal_jobs_copy)
  1041      1000        677.2      0.7      0.0          for temp_job_id in success_sched_job_ids:
  1042       427       3739.3      8.8      0.0              status_update_path, _ = self.get_target_job_status_update_path_and_status(temp_job_id, "dataset")
  1043       427       1226.8      2.9      0.0              origin_status_success, target_status_success = self.get_job_status_update_origin_target(status_update_path)
  1044       427      34729.4     81.3      0.0              self.sche_reflash_job_status(temp_job_id, origin_status_success, target_status_success)
  1045       427        315.0      0.7      0.0              need_failed_job.remove(temp_job_id)
  1046                                                       
  1047                                                       # self.jobid_2_real_sched_epochs[temp_job_id] += self.jobid_2_update_sched_epoch_num[temp_job_id]
  1048                                           
  1049      1000        367.1      0.4      0.0          for temp_job_id in need_failed_job:
  1050       573      43449.9     75.8      0.0              self.sched_logger.info("failed job scheduling [{}] first".format(temp_job_id))
  1051                                                       # TODO(xlc): 这里不应该直接设置为Failed状态, 而是考虑max_time的情况, 决定是否将任务放到NO_SCHED的状态, 同时需要知道模型的最新保存位置?
  1052       573       6487.5     11.3      0.0              status_update_path, _ = self.get_target_job_status_update_path_and_status(temp_job_id, "failed")
  1053       573        653.3      1.1      0.0              origin_info = self.jobid_2_origininfo[temp_job_id]
  1054       573       3135.4      5.5      0.0              origin_status_failed, target_status_failed = self.get_job_status_update_origin_target(status_update_path)
  1055       573      45401.8     79.2      0.0              self.sche_reflash_job_status(temp_job_id, origin_status_failed, target_status_failed)
  1056       573        408.0      0.7      0.0              if not self.simulation:
  1057                                                           self.failed_job_to_dispatcher(temp_job_id, origin_info)
  1058                                                       # self.jobid_2_failed_epochs[temp_job_id] += self.jobid_2_update_sched_epoch_num[temp_job_id]
  1059                                                       '''
  1060                                                       if self.jobid_2_real_sched_epochs[temp_job_id] >= self.jobid_2_target_epochs[temp_job_id]:
  1061                                                           status_update_path, _ = self.get_target_job_status_update_path_and_status(temp_job_id, "finished")
  1062                                                           origin_info = self.jobid_2_origininfo[temp_job_id]
  1063                                                           self.finished_job_to_dispatcher(temp_job_id, origin_info)
  1064                                                       elif self.jobid_2_current_epochs[temp_job_id] >= self.jobid_2_max_sched_epoch_num[temp_job_id]:
  1065                                                           status_update_path, _ = self.get_target_job_status_update_path_and_status(temp_job_id, "failed")
  1066                                                           origin_info = self.jobid_2_origininfo[temp_job_id]
  1067                                                           self.failed_job_to_dispatcher(temp_job_id, origin_info)
  1068                                                       else:
  1069                                                           self.global_job_arrival_index += 1
  1070                                                           self.jobid_2_arrival_index[temp_job_id] = self.global_job_arrival_index
  1071                                                           self.jobid_2_recoming_min_time[temp_job_id] = time.time() + self.recoming_time_interval
  1072                                                           status_update_path, _ = self.get_target_job_status_update_path_and_status(temp_job_id, "wait_recoming")
  1073                                                       '''
  1074      1000        492.1      0.5      0.0          if not self.simulation:
  1075                                                       self.report_status("after sched_dataset_for_done_significance_cal_jobs")

